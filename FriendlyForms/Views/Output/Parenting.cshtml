@using Models.ViewModels
@model FriendlyForms.Models.ChildSupportAllViewModel
@{
    ViewBag.Title = "Parenting";
}
@section Sidebar{
    <a href="@Url.Action("Index", "Home")" class="visible-phone"><i class="icon icon-home"></i>Home</a>
    <ul>
        <li class="nav-item active" id="courtNav"><a href="#" data-form="court"><i class="icon-check"></i>Parenting</a></li>
        <li class="nav-item" id="participantsNav"><a href="#" data-form="participants"><i class="icon-check"></i>Participants</a></li>
    </ul>
}
<h4>COUNTY SUPERIOR COURT</h4>
<h4>STATE OF GEORGIA</h4>
<hr />
<div class="row-fluid">
    <div class="span6" style="border-right: solid black 2px">
        <h5>@Model.ParticipantViewModel.PlaintiffsName</h5>
        <span>Plaintiff</span><br />
        <br />
        <span>vs.</span><br />
        <br />
        <h5>@Model.ParticipantViewModel.DefendantsName</h5>
        <span>Defendant</span><br />
    </div>
    <div class="span6">
        <span>@Model.CourtViewModel.CaseNumber</span><br />
        <br />
        Civil Action Case Number
    </div>
</div>
<hr />
<div class="row-fluid">
    <h4>Parenting Plan</h4>
    @if (Model.CourtViewModel.AuthorOfPlan.Equals((int)AuthorOfPlan.Judge))
    {
        <p>
            The parties have agreed to the terms of this plan and this information has been furnished by both 
            parties to meet the requirements of OCGA Section 19-9-1. The parties agree on the terms of the plan and 
            afﬁ rm the accuracy of the information provided, as shown by their signatures at the end of this order.
        </p>        
    }
    else
    {
        <p>This plan has been prepared by the judge.</p>
    }
    @if (Model.CourtViewModel.PlanType.Equals((int)PlanType.NewPlan))
    {
        <p>This plan is a new plan</p>
    }
    else if (Model.CourtViewModel.PlanType.Equals((int)PlanType.ExistingPlan))
    {
        <p>This plan modiﬁes an existing Parenting Plan dated @Model.CourtViewModel.PlanDate</p>
    }
    else
    {
        <p>This plan modiﬁes an existing Order dated @Model.CourtViewModel.PlanDate</p>
    }
</div>
<h4>Children</h4>
@if (Model.ChildrenViewModel.Children.Any())
{
    foreach (var child in Model.ChildrenViewModel.Children)
    {
    <div class="row-fluid">
        <div class="span4">@child.Name</div>
        <div class="span4">
            @if (child.DateOfBirth.HasValue)
            {
                <span>@child.DateOfBirth.Value.ToString("MM/dd/yyyy")</span>;
            }
            else
            {
                @:Not Provided
                               }
        </div>
        <div class="span4">@Enum.GetName(typeof(Gender), child.Gender)</div>
    </div>
    }

    <div class="row-fluid">
        <h4>Custody and Decision Making</h4>
        @{
        var parent = "Both parents";
        var nonCustodyParent = "";
        var phrase = "The parties will share legal custody of the children";
    if (Model.ParticipantViewModel.PlaintiffCustodialParent.Equals((int)CustodialParent.Primary))
    {
        parent = @Enum.GetName(typeof(ParentRelationship), Model.ParticipantViewModel.PlaintiffRelationship);
        nonCustodyParent = @Enum.GetName(typeof(ParentRelationship), Model.ParticipantViewModel.DefendantRelationship);
        phrase = "The" + parent + " will be the primary legal custodian of the children";
    }
    else if (Model.ParticipantViewModel.DefendantCustodialParent.Equals((int)CustodialParent.Primary))
    {
        parent = @Enum.GetName(typeof(ParentRelationship), Model.ParticipantViewModel.DefendantRelationship);
        nonCustodyParent = @Enum.GetName(typeof(ParentRelationship), Model.ParticipantViewModel.PlaintiffRelationship);
        phrase = "The " + parent + " will be the primary legal custodian of the children";
    }            
        }
        <p>@phrase</p>
    </div>
    <h4>Primary Physical Custody</h4>
    <p>For each of the children named below, the primary physical custodian shall be:</p>
    foreach (var child in Model.ChildrenViewModel.Children)
    {
    <div class="row-fluid">
        <div class="span4">@child.Name</div>
        <div class="span4">@parent</div>
    </div>
    }
    <p>
        WHERE JOINT PHYSICAL CUSTODY IS CHOSEN BY THE PARENTS OR ORDERED
BY THE COURT, A DETAILED PLAN OF THE LIVING ARRANGEMENTS OF THE
CHILD(REN) SHALL BE ATTACHED AND MADE A PART OF THIS PARENTING PLAN.
    </p>
    <div class="row-fluid">
        <h4>Day-To-Day Decisions</h4>
        <p>
            Each parent shall make decisions regarding the day-to-day care of a child while the child is residing with that 
        parent, including any emergency decisions affecting the health or safety of a child.
        </p>
    </div>
    <div class="row-fluid">
        <h4>Major Decisions</h4>
        <p>
            The parties must confer with one another prior to any decision related to non-emergency health care, education, religion, or extra-curricular activities.  The listing below indicates who will
            be the primary decision maker when when there is disagreement regarding the most appropriate decision. 
        </p>
        @foreach (var child in Model.ChildrenViewModel.Children)
    {
            <h5>@child.Name</h5>
            <p>
                Educational Decisions: 
            @{
        var childDecision = Model.AllDecisionsViewModel.ChildDecisions.First(c => c.ChildId.Equals(child.Id));
        var extraChildDecisions = Model.AllDecisionsViewModel.ChildExtraDecisions.Where(c => c.ChildId.Equals(child.Id));
            }
                @Enum.GetName(typeof(DecisionMaker), childDecision.Education)
            </p>
            <p>
                Non-emergency health care:
            @Enum.GetName(typeof(DecisionMaker), childDecision.HealthCare)
            </p>
            <p>
                Religious upbringing:
            @Enum.GetName(typeof(DecisionMaker), childDecision.Religion)
            </p>
            <p>
                Extracurricular Activities:
            @Enum.GetName(typeof(DecisionMaker), childDecision.ExtraCurricular)
            </p>
        foreach (var extra in extraChildDecisions)
        {
            <p>@extra.Description: @Enum.GetName(typeof(DecisionMaker), extra.DecisionMaker)</p>
        }
    }
    </div>
    <h4>Disagreements</h4>
    <div class="row-fluid">
        <p>
            Where parents have elected joint decision making in the Major Decisions Section above, please explain how any disagreements in decision-making will be resolved.
        </p>
    </div>
    <h4>Exchange of Children</h4>
    <p>The @Enum.GetName(typeof(DecisionMaker), @Model.ResponsibilityViewModel.BeginningVisitation) will be responsible to pick up or drop off children at the beginning of scheduled visitation periods.</p>
    <p>The @Enum.GetName(typeof(DecisionMaker), @Model.ResponsibilityViewModel.EndVisitation) will be responsible to pick up or drop off children at the end of scheduled visitation periods.</p>
    if(Model.ResponsibilityViewModel.TransportationCosts.Equals((int)TransportationCost.Half))
     {
    <p>Each party will be responsible to pay 1/2 of the total expenses accrued between the parties, in regard to compliance with the visitation schedule.</p>
     }
    else if(Model.ResponsibilityViewModel.TransportationCosts.Equals((int)TransportationCost.Own))
     {
    <p>Each party will be responsible to absorb all expenses related to complying with the visitation schedule.</p>
     }
    else if(Model.ResponsibilityViewModel.TransportationCosts.Equals((int)TransportationCost.Percentage))
     {
    <p>The Mother shall pay @Model.ResponsibilityViewModel.MotherPercentage% of expenses related to compliance with the visitation schedule, and the Father shall pay the remaining expenses.</p>
     }
    else 
     {
    <p>Visitation related expenses will be paid as follows:<br />
        @Model.ResponsibilityViewModel.OtherDetails</p>
     }
    <h4>Parenting Time/Visitation Schedules</h4>
    <p>
        The parenting schedule will begin
    @if (Model.ScheduleViewModel.DetermineBeginDate.Equals((int)DateDetermination.Judge))
    {
        @: on the date of the Court's Order
    }
    else
    {
        @: on @Model.ScheduleViewModel.BeginDate
    }
    </p>
    <div class="row-fluid">
        <p>
            The @nonCustodyParent will have parenting time with the couple’s children from @Model.ScheduleViewModel.WeekendDayStart at @Model.ScheduleViewModel.PickedUp until
            @Model.ScheduleViewModel.WeekendDayEnd at @Model.ScheduleViewModel.DroppedOff . The @nonCustodyParent will pick up children at @Model.ScheduleViewModel.PickupLocation, and drop off children 
            at @Model.ScheduleViewModel.DropOffLocation.
        </p>
    </div>
    <div class="row-fluid">
        <p>
            During the term of this parenting plan the mother shall have at a minimum  
            @if (Model.ScheduleViewModel.MotherWeekend.Equals((int)ParentWeekends.FirstThird))
            {
                <span>the weekend of the first and third friday of each month for visiation</span>
            }
            else if (Model.ScheduleViewModel.MotherWeekend.Equals((int)ParentWeekends.FirstThirdFifth))
            {
            <span>the weekend of the first, third and fifth friday of each month for visitation</span>
            }
            else if (Model.ScheduleViewModel.MotherWeekend.Equals((int)ParentWeekends.SecondFourth))
            {
            <span>the weekend of the second and fourth friday of each month for visitation</span>
            }
            else if (Model.ScheduleViewModel.MotherWeekend.Equals((int)ParentWeekends.EveryOther))
            {
            <span>the weekend of the second and fourth friday of each month for visitation</span>
            }
            else{
            <span>@Model.ScheduleViewModel.MotherWeekendOther for visitation</span>
            }
        </p>
        <p>
            During the term of this parenting plan the father shall have at a minimum 
            @if (Model.ScheduleViewModel.FatherWeekend.Equals((int)ParentWeekends.FirstThird))
            {
                <span>The weekend of the first and third friday of each month for visitation</span>
            }
            @if (Model.ScheduleViewModel.FatherWeekend.Equals((int)ParentWeekends.FirstThirdFifth))
            {
                <span>The weekend of the first, third and fifth friday of each month for visitation</span>
            }
            else if (Model.ScheduleViewModel.FatherWeekend.Equals((int)ParentWeekends.SecondFourth))
            {
            <span>The weekend of the second and fourth friday of each month for visitation</span>
            }
            else if (Model.ScheduleViewModel.FatherWeekend.Equals((int)ParentWeekends.EveryOther))
            {
            <span>The weekend of the second and fourth friday of each month for visitation</span>
            }
            else{
            <span>@Model.ScheduleViewModel.MotherWeekendOther for visitation</span>
            }
        </p>
    </div>
    if(Model.ScheduleViewModel.Weekdays.Equals((int)YesNo.Yes))
     {
    <h4>Weekday Parenting</h4>
    <p>
        During the term of this parenting plan the weekdays shall be divided as shown below:
    </p>
    <div class="row-fluid">
        <span class="span3">Monday</span>
        <span class="span3">@Enum.GetName(typeof(DecisionMaker), Model.ScheduleViewModel.MondayParent)</span>
    </div>
    <div class="row-fluid">
        <span class="span3">Tuesday</span>
        <span class="span3">@Enum.GetName(typeof(DecisionMaker), Model.ScheduleViewModel.TuesdayParent)</span>
    </div>
    <div class="row-fluid">
        <span class="span3">Wednesday</span>
        <span class="span3">@Enum.GetName(typeof(DecisionMaker), Model.ScheduleViewModel.WednesdayParent)</span>
    </div>
    <div class="row-fluid">
        <span class="span3">Thursday</span>
        <span class="span3">@Enum.GetName(typeof(DecisionMaker), Model.ScheduleViewModel.ThursdayParent)</span>
    </div>
    <div class="row-fluid">
        <span class="span3">Friday</span>
        <span class="span3">@Enum.GetName(typeof(DecisionMaker), Model.ScheduleViewModel.FridayParent)</span>
    </div>
    <p>For purposes of this parenting plan, a weekday will start at @Model.ScheduleViewModel.WeekdayPickup at @Model.ScheduleViewModel.WeekdayPickupLocation and end at @Model.ScheduleViewModel.WeekdayDropoff at @Model.ScheduleViewModel.WeekdayDropoffLocation</p>   
     }    
    <h4>Major holidays and Vacation Periods</h4>
    foreach (var child in Model.ChildrenViewModel.Children)
    {
        <h4>@child.Name</h4>

        <h5>Thanksgiving</h5>
        <p>
    @{
        var childHolidays = Model.HolidayViewModel.ChildHolidays.First(c => c.ChildId.Equals(child.Id));
        var extraChildHolidays = Model.HolidayViewModel.ExtraChildHolidays.Where(c => c.ChildId.Equals(child.Id));
    }            
            @if(childHolidays.ThanksgivingFather.Equals((int)HolidayYear.Every))
            {
                @:The father will have visitation at Thanksgiving every year.  
            }
            else if(childHolidays.ThanksgivingMother.Equals((int)HolidayYear.Every))
            {
                @:The mother will have visitation at Thanksgiving every year.  
            }else
            {
                @:The @nonCustodyParent will have visitation at Thanksgiving in 
                @(@nonCustodyParent == "Father" ? Enum.GetName(typeof (HolidayYear), childHolidays.ThanksgivingFather) : Enum.GetName(typeof (HolidayYear), childHolidays.ThanksgivingMother))
                @:years.    
            }
            Visitation will begin at the time the school day ends on the last
            school day prior tothe holiday break, and end at @childHolidays.ThanksgivingTime on 

            @if (childHolidays.Thanksgiving.Equals((int)Thanksgiving.Before))
            {
                <span>the day before returning to school.</span>
            }
            else if (childHolidays.Thanksgiving.Equals((int)Thanksgiving.After))
            {
                <span>the first day of school after the holiday.</span>
            }
            else
            {
                <span>@childHolidays.ThanksgivingOther</span>
            }
        </p>
        <h5>Christmas</h5>
        <p>
            @if(childHolidays.ChristmasFather.Equals((int)HolidayYear.Every))
            {
                @:The father will have visitation at Christmas every year.  
            }
            else if(childHolidays.ChristmasMother.Equals((int)HolidayYear.Every))
            {
                @:The mother will have visitation at Christmas every year.  
            }else
            {
                @:The @nonCustodyParent will have visitation at Christmas in
                @(@nonCustodyParent == "Father" ? Enum.GetName(typeof (HolidayYear), childHolidays.ChristmasFather) : Enum.GetName(typeof (HolidayYear), childHolidays.ChristmasMother))
                @:years.
            } 
            Visitation will begin at the time the school day ends on the last
            school day prior tothe holiday break, and end at @childHolidays.ChristmasTime  
            @if (childHolidays.Christmas.Equals((int)Christmas.AfterBreak))
            {
                <span> until returning to school after Christmas break</span>
            }
            else if (childHolidays.Christmas.Equals((int)Christmas.Eve))
            {
                <span> on Christmas Eve </span>
            }
            else if (childHolidays.Christmas.Equals((int)Christmas.Day))
            {
                <span> on Christmas Day</span>
            }
            else if (childHolidays.Christmas.Equals((int)Christmas.AfterDay))
            {
                <span> on the day after Christmas</span>
            }
            else
            {
                <span>@childHolidays.ChristmasOther</span>
            }
        </p>
        <h5>Spring Break</h5>
        <p>
            @if(childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
            {
                @:The father will have visitation at Spring Break every year.  
            }
            else if(childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
            {
                @:The mother will have visitation at Spring Break every year.  
            }else
            {
                @:The @nonCustodyParent will have visitation at Spring Break in
                @(@nonCustodyParent == "Father" ? Enum.GetName(typeof (HolidayYear), childHolidays.SpringBreakFather) : Enum.GetName(typeof (HolidayYear), childHolidays.SpringBreakMother))
                @:years.
            }
            Visitation will begin at the time the school day ends on the last
            school day prior to the holiday break, and end at @childHolidays.SpringBreakTime on  
            @if (childHolidays.SpringBreak.Equals((int)YesNo.Yes))
            {
                <span>the conclusion of spring break</span>
            }
            else
            {
                <span>@childHolidays.SpringOther</span>
            }
        </p>
        <h5>Summer Break</h5>
        <p>The parties agree that summer break begins @childHolidays.SummerBeginDays days after the last day of school at @childHolidays.SummerBeginTime</p>
        <p>The parties agree that summer break ends @childHolidays.SummerEndDays days after the last day of school at @childHolidays.SummerEndTime</p>
        <p>The parties will manage summer break visitation as follows: @childHolidays.SummerDetails</p>
        <h5>Fall Break</h5>
        <p>
            @if(childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
            {
                @:The father will have visitation at Fall Break every year.  
            }
            else if(childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
            {
                @:The mother will have visitation at Fall Break every year.  
            }else
            {
                @:The @nonCustodyParent will have visitation at Fall Break in
                @(@nonCustodyParent == "Father" ? Enum.GetName(typeof (HolidayYear), childHolidays.FallBreakFather) : Enum.GetName(typeof (HolidayYear), childHolidays.FallBreakMother))
                @:years.
            }
            Visitation will begin at the time the school day ends on the last
            school day prior to the holiday break, and end at @childHolidays.FallBreakTime on  
            @if (childHolidays.FallBreak.Equals((int)YesNo.Yes))
            {
                <span>the conclusion of fall break</span>
            }
            else
            {
                <span>@childHolidays.FallOther</span>
            }
        </p>
        <h5>Other Holidays</h5>
        <p>The parties agree that all other holidays will be managed in accordance with the following:</p>
        <div class="row-fluid">
            <div class="span4">Holiday</div>
            <div class="span4">Mother</div>
            <div class="span4">Father</div>
        </div>
        <div class="row-fluid">
            <div class="span4">MLK Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MlkMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MlkFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">President's Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.PresidentsMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.PresidentsFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Mother's Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Memorial Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MemorialMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MemorialFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Father's Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Independance Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.IndependenceMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.IndependenceFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Labor Day</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.LaborMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.LaborFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Halloween</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.HalloweenMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.HalloweenFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Child(ren)'s Birthdays</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ChildrensMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ChildrensFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Father's Birthdays</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersBdayMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersBdayFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Mother's Birthdays</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersBdayMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersBdayFather)</div>
        </div>
        <div class="row-fluid">
            <div class="span4">Religious Holidays</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ReligiousMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ReligiousFather)</div>
        </div>
    foreach (var extra in extraChildHolidays)
    {
        <div class="row-fluid">
            <div class="span4">@extra.HolidayName</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), extra.HolidayMother)</div>
            <div class="span4">@Enum.GetName(typeof(HolidayYear), extra.HolidayFather)</div>
        </div>           
    }
    if(childHolidays.FridayHoliday)
    {
    <p>The parties agree that holiday visitation will include the following Monday, when the holiday falls on Friday</p>        
    } if (childHolidays.MondayHoliday)
    {
    <p>The parties agree that holiday visitation will include the preceding Friday, when the holiday falls on Monday</p>                
    }

    }
}
else
{
    <p>There are no minor children of the parties to be considered in this matter.</p>
}
<input type="submit" id="printForm" class="btn-primary" />
