@model FriendlyForms.Models.ParentingPlanViewModel
@using Models.ViewModels
<h4>Major holidays and Vacation Periods</h4>
@foreach (var child in Model.ChildAllViewModel.ChildViewModel.Children)
{
    <h4>@child.Name</h4>

    <h5>Thanksgiving</h5>
    <p>
        @{
    var childHolidays = Model.HolidayViewModel.ChildHolidays.First(c => c.ChildId.Equals(child.Id));
    var extraChildHolidays = Model.HolidayViewModel.ExtraChildHolidays.Where(c => c.ChildId.Equals(child.Id));
        }
        @if (childHolidays.ThanksgivingFather.Equals((int)HolidayYear.Every))
        {
            @:The father will have visitation at Thanksgiving every year.  
            }
        else if (childHolidays.ThanksgivingMother.Equals((int)HolidayYear.Every))
        {
            @:The mother will have visitation at Thanksgiving every year.  
            }
        else
        {
            @:The @Model.PpOutputFormHelper.NonCustodyParent will have visitation at Thanksgiving in 
            @(@Model.PpOutputFormHelper.NonCustodyParent == "Father" ? Enum.GetName(typeof(HolidayYear), childHolidays.ThanksgivingFather) : Enum.GetName(typeof(HolidayYear), childHolidays.ThanksgivingMother))
            @:years.    
            }
        Visitation will begin at the time the school day ends on the last
            school day prior tothe holiday break, and end at @childHolidays.ThanksgivingTime on 

            @if (childHolidays.Thanksgiving.Equals((int)Thanksgiving.Before))
            {
                <span>the day before returning to school.</span>
            }
            else if (childHolidays.Thanksgiving.Equals((int)Thanksgiving.After))
            {
                <span>the first day of school after the holiday.</span>
            }
            else
            {
                <span>@childHolidays.ThanksgivingOther</span>
            }
    </p>
    <h5>Winter Break</h5>
    <p>
        @if (childHolidays.ChristmasFather.Equals((int)HolidayYear.Every))
        {
            @:The father will have visitation at Winter Break every year.  
            }
        else if (childHolidays.ChristmasMother.Equals((int)HolidayYear.Every))
        {
            @:The mother will have visitation at Winter Break every year.  
            }
        else
        {
            @:The @Model.PpOutputFormHelper.NonCustodyParent will have visitation at Winter Break in
            @(@Model.PpOutputFormHelper.NonCustodyParent == "Father" ? Enum.GetName(typeof(HolidayYear), childHolidays.ChristmasFather) : Enum.GetName(typeof(HolidayYear), childHolidays.ChristmasMother))
            @:years.
            }
        Visitation will begin at the time the school day ends on the last
            school day prior tothe holiday break, and end at @childHolidays.ChristmasTime
        @if (childHolidays.Christmas.Equals((int)Christmas.AfterBreak))
        {
            <span>until returning to school after Winter Break</span>
        }
        else if (childHolidays.Christmas.Equals((int)Christmas.Eve))
        {
            <span>on Christmas Eve </span>
        }
        else if (childHolidays.Christmas.Equals((int)Christmas.Day))
        {
            <span>on Christmas Day</span>
        }
        else if (childHolidays.Christmas.Equals((int)Christmas.AfterDay))
        {
            <span>on the day after Christmas</span>
        }
        else
        {
            <span>@childHolidays.ChristmasOther</span>
        }
    </p>
    <h5>Spring Break</h5>
    <p>
        @if (childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
        {
            @:The father will have visitation at Spring Break every year.  
            }
        else if (childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
        {
            @:The mother will have visitation at Spring Break every year.  
            }
        else
        {
            @:The @Model.PpOutputFormHelper.NonCustodyParent will have visitation at Spring Break in
            @(@Model.PpOutputFormHelper.NonCustodyParent == "Father" ? Enum.GetName(typeof(HolidayYear), childHolidays.SpringBreakFather) : Enum.GetName(typeof(HolidayYear), childHolidays.SpringBreakMother))
            @:years.
            }
        Visitation will begin at the time the school day ends on the last
            school day prior to the holiday break, and end at @childHolidays.SpringBreakTime on  
            @if (childHolidays.SpringBreak.Equals((int)YesNo.Yes))
            {
                <span>the conclusion of spring break</span>
            }
            else
            {
                <span>@childHolidays.SpringOther</span>
            }
    </p>
    <h5>Summer Break</h5>
    <p>The parties agree that summer break begins @childHolidays.SummerBeginDays days after the last day of school at @childHolidays.SummerBeginTime</p>
    <p>The parties agree that summer break ends @childHolidays.SummerEndDays days after the last day of school at @childHolidays.SummerEndTime</p>
    <p>The parties will manage summer break visitation as follows: @childHolidays.SummerDetails</p>
    <h5>Fall Break</h5>
    <p>
        @if (childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
        {
            @:The father will have visitation at Fall Break every year.  
            }
        else if (childHolidays.SpringBreakFather.Equals((int)HolidayYear.Every))
        {
            @:The mother will have visitation at Fall Break every year.  
            }
        else
        {
            @:The @Model.PpOutputFormHelper.NonCustodyParent will have visitation at Fall Break in
            @(@Model.PpOutputFormHelper.NonCustodyParent == "Father" ? Enum.GetName(typeof(HolidayYear), childHolidays.FallBreakFather) : Enum.GetName(typeof(HolidayYear), childHolidays.FallBreakMother))
            @:years.
            }
        Visitation will begin at the time the school day ends on the last
            school day prior to the holiday break, and end at @childHolidays.FallBreakTime on  
            @if (childHolidays.FallBreak.Equals((int)YesNo.Yes))
            {
                <span>the conclusion of fall break</span>
            }
            else
            {
                <span>@childHolidays.FallOther</span>
            }
    </p>
    <h5>Other Holidays</h5>
    <p>The parties agree that all other holidays will be managed in accordance with the following:</p>
    <div class="row-fluid">
        <div class="span4">Holiday</div>
        <div class="span4">Mother</div>
        <div class="span4">Father</div>
    </div>
    <div class="row-fluid">
        <div class="span4">MLK Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MlkMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MlkFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">President's Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.PresidentsMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.PresidentsFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Mother's Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Memorial Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MemorialMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MemorialFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Father's Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Independance Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.IndependenceMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.IndependenceFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Labor Day</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.LaborMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.LaborFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Halloween</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.HalloweenMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.HalloweenFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Child(ren)'s Birthdays</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ChildrensMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ChildrensFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Father's Birthdays</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersBdayMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.FathersBdayFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Mother's Birthdays</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersBdayMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.MothersBdayFather)</div>
    </div>
    <div class="row-fluid">
        <div class="span4">Religious Holidays</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ReligiousMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), childHolidays.ReligiousFather)</div>
    </div>
            foreach (var extra in extraChildHolidays)
            {
    <div class="row-fluid">
        <div class="span4">@extra.HolidayName</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), extra.HolidayMother)</div>
        <div class="span4">@Enum.GetName(typeof(HolidayYear), extra.HolidayFather)</div>
    </div>
            }
            if (childHolidays.FridayHoliday)
            {
    <p>The parties agree that holiday visitation will include the following Monday, when the holiday falls on Friday</p>
            } if (childHolidays.MondayHoliday)
            {
    <p>The parties agree that holiday visitation will include the preceding Friday, when the holiday falls on Monday</p>
            }

}
